opt_out_usage
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
require "fastlane"
require "dotenv"
require "fileutils"
require "git"
require "json"
require "match/encryption/encryption"
require "rexml/document"
require "stringio"
require "tempfile"
require "version"
require "xcodeproj"


# Skip README.md creation
Fastlane::Actions::SkipDocsAction.run(nil)

# Load .env (local)
if File.exist?(".env")
  Dotenv.load(".env")
end

# Fastlane's namespacing via "platform" is great, but its internal list does not reflect my needs
# This monkey-patch allows me to use platform designations for :flutter and :apple
module Fastlane
  module SupportedPlatforms
    def self.all
      [:flutter, :apple]
    end
  end
end


# Signing assets setup
git_user = ENV["GIT_USER"].split(":")
signing_assets_path = "/tmp/SigningAssets"
keychains_path = "~/Library/Keychains"

# AppStore Connect API setup
apple_api_key = app_store_connect_api_key(
  key_content: ENV["APP_STORE_KEY"],
  key_id: ENV["APP_STORE_KEY_ID"],
  issuer_id: ENV["APP_STORE_ISSUER_ID"],
  in_house: false
)

# Play Store API setup
google_api_key = ENV["PLAY_STORE_KEY"]

# Auto generate a changelog message
changelog = "Maintenance build generated on #{Time.now.strftime("%a. %b %-d %Y")}"

# Define common provisioning lanes
desc "Uses Match for initial signing certificate and provisioning profile generation"
lane :initial_provisioning do
  # Remove the build keychain
  if File.exist?("#{keychains_path}/#{ENV["KEYCHAIN"]}-db")
    delete_keychain(
      name: ENV["KEYCHAIN"]
    )
  end

  # Create the temp keychain
  create_keychain(
    name: ENV["KEYCHAIN"],
    password: ENV["MATCH_PASSWORD"],
    default_keychain: true,
    unlock: true,
    timeout: 3600
  )

  # Clear or create the signing assets destination
  if Dir.exist?(signing_assets_path)
    FileUtils.rm_rf(Dir.glob("#{signing_assets_path}/*"))
  else
    FileUtils.mkdir_p(signing_assets_path)
  end

  # Clone the signing assets repo
  Tempfile.create("git_ssh_key") do |file|
    file.write(ENV["GIT_SSH_KEY"])
    file.chmod(0600)
    file.flush
    ENV["GIT_SSH_COMMAND"] = "ssh -i #{file.path} -o IdentitiesOnly=yes"
    repo = Git.clone(ENV["KEYS_GIT_URL"], signing_assets_path)
    repo.config('user.name', git_user[0], global: false)
    repo.config('user.email', git_user[1], global: false)

    # Create Google Play Store key in the keystore file
    google_keystore = "keystores/google.jks"
    if File.exist?("#{signing_assets_path}/#{google_keystore}")
      decrypt("#{signing_assets_path}/#{google_keystore}")
    end
    id_segments = ENV["APP_IDENTIFIER"].split(".")
    keytool(
      command: "genkey",
      keystore_path: "#{signing_assets_path}/#{google_keystore}",
      keystore_password: ENV["MATCH_PASSWORD"],
      key_alias: ENV["APP_IDENTIFIER"],
      key_algorithm: "RSA",
      key_size: 2048,
      validity: 10000,
      dname: "CN=#{id_segments.pop}, O=#{id_segments.pop}, OU=#{id_segments.pop}, L=City, S=State, C=US",
      verbose: true
    )
    encrypt("#{signing_assets_path}/#{google_keystore}")
    repo.add(google_keystore)
    repo.commit("[fastlane] Updated keystore and platform android")
    repo.push

    # Create Apple signing certs and provisioning profiles with match
    %w[tvos ios macos catalyst].each do |platform|
      match(
        keychain_name: ENV["KEYCHAIN"],
        keychain_password: ENV["MATCH_PASSWORD"],
        git_url: signing_assets_path,
        app_identifier: ENV["APP_IDENTIFIER"],
        api_key: apple_api_key,
        platform: platform,
        type: "appstore",
        additional_cert_types: "mac_installer_distribution",
        generate_apple_certs: true,
        include_mac_in_profiles: true,
        readonly: false,
        force: true,
        verbose: true
      )
    end
  end
end

desc "Import keystores, certificates and provisioning profiles"
lane :import_signingassets do
  # Remove the build keychain
  if File.exist?("#{keychains_path}/#{ENV["KEYCHAIN"]}-db")
    delete_keychain(
      name: ENV["KEYCHAIN"]
    )
  end

  # Create the temp keychain
  create_keychain(
    name: ENV["KEYCHAIN"],
    password: ENV["MATCH_PASSWORD"],
    default_keychain: true,
    unlock: true,
    timeout: 3600
  )

  # Clean the signing assets repo
  if Dir.exist?(signing_assets_path)
    FileUtils.rm_rf(Dir.glob("#{signing_assets_path}/*"))
  else
    FileUtils.mkdir_p(signing_assets_path)
  end

  # Clone the signing assets repo
  Tempfile.create("git_ssh_key") do |file|
    file.write(ENV["GIT_SSH_KEY"])
    file.chmod(0600)
    file.flush
    ENV["GIT_SSH_COMMAND"] = "ssh -i #{file.path} -o IdentitiesOnly=yes"
    repo = Git.clone(ENV["KEYS_GIT_URL"], signing_assets_path)

    # Generate Google keystore properties from the repo
    google_keystore = "keystores/google.jks"
    if File.exist?("#{signing_assets_path}/#{google_keystore}")
      decrypt("#{signing_assets_path}/#{google_keystore}")
      File.open("../android/key.properties", "w") do |file|
        file.puts "storeFile=#{signing_assets_path}/#{google_keystore}"
        file.puts "storePassword=#{ENV["MATCH_PASSWORD"]}"
        file.puts "keyAlias=#{ENV["APP_IDENTIFIER"]}"
        file.puts "keyPassword=#{ENV["MATCH_PASSWORD"]}"
      end
    end

    # Install Apple certs and profiles from the repo
    %w[tvos ios macos catalyst].each do |platform|
      match(
        keychain_name: ENV["KEYCHAIN"],
        keychain_password: ENV["MATCH_PASSWORD"],
        git_url: signing_assets_path,
        app_identifier: ENV["APP_IDENTIFIER"],
        api_key: apple_api_key,
        platform: platform,
        type: "appstore",
        additional_cert_types: "mac_installer_distribution",
        generate_apple_certs: true,
        include_mac_in_profiles: true,
        readonly: true,
        force: false,
        verbose: false
      )
    end
  end
end

# Import platform lanes
import './lanes/apple.rb'
import './lanes/flutter.rb'

# Common helper functions
def execute_command(cmd)
  UI.command(cmd)
  output, status = Open3.capture2(cmd, err: [:child, :out])
  unless status.success?
    UI.user_error!("== Command Failed ==\nExit Status: #{status.exitstatus}\nOutput: #{output}")
  end
  output
end

def encrypt(file)
  cryptor = Match::Encryption::MatchFileEncryption.new
  cryptor.encrypt(file_path: file, password: ENV["MATCH_PASSWORD"])
end

def decrypt(file)
  cryptor = Match::Encryption::MatchFileEncryption.new
  cryptor.decrypt(file_path: file, password: ENV["MATCH_PASSWORD"])
end

def increment_version_patch()
  # Check the latest version string in Test Flight
  app_store_build_number(
    api_key: apple_api_key,
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false,
    platform: "ios"
  )
  ios_version = lane_context[SharedValues::LATEST_VERSION]

  app_store_build_number(
    api_key: apple_api_key,
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false,
    platform: "appletvos"
  )
  tvos_version = lane_context[SharedValues::LATEST_VERSION]

  app_store_build_number(
    api_key: apple_api_key,
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false,
    platform: "osx"
  )
  macos_version = lane_context[SharedValues::LATEST_VERSION]

  # Check the latest version string in Google Play
  play_store_build_number(
    api_key: ,
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false,
    platform: "android"
  )
  android_version = lane_context[SharedValues::LATEST_VERSION]

  # Check the latest version string on the web
  web_build_number(
    api_key: "",
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false,
    platform: "web"
  )
  web_version = lane_context[SharedValues::LATEST_VERSION]

  # Select the highest existing version number
  latest_version = [
    Gem::Version.new(ios_version),
    Gem::Version.new(tvos_version),
    Gem::Version.new(macos_version),
    Gem::Version.new(android_version),
    Gem::Version.new(web_version)].max
  puts "Found version #{latest_version}"

  # Increment the version patch segment
  version_segments = latest_version.segments
  while version_segments.length < 3
    version_segments << 0
  end
  version_segments[2] += 1
  new_version = version_segments.join(".")
  UI.success("Setting the new version as #{new_version}")
  new_version
end
