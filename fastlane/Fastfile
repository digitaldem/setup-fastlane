opt_out_usage
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
require "fastlane"
require "dotenv"
require "fileutils"
require "git"
require "json"
require "match/encryption/encryption"
require "rexml/document"
require "stringio"
require "tempfile"
require "version"
require "xcodeproj"

# Skip README.md creation
Fastlane::Actions::SkipDocsAction.run(nil)

# Fastlane's namespacing via "platform" is great, but its default list does not meet my needs
Fastlane::SupportedPlatforms.extra = [:apple, :flutter]

# Load .env (local)
if File.exist?(".env")
  Dotenv.load(".env")
end

# Auto generate a changelog message
$changelog = "Maintenance build generated on #{Time.now.strftime("%a. %b %-d %Y")}"

# Set keychain location
$keychains_path = "~/Library/Keychains"

# Signing assets setup
$signing_assets_path = "/tmp/SigningAssets"


# Define common provisioning lanes
desc "Uses Match for initial signing certificate and provisioning profile generation"
lane :initial_provisioning do |options|
  android = options[:android] ? true : false
  apple = []
  apple.push("ios") if options[:ios]
  apple.push("macos", "catalyst") if options[:macos]
  apple.push("tvos") if options[:tvos]

  # Clear or create the signing assets destination
  if Dir.exist?($signing_assets_path)
    FileUtils.rm_rf(Dir.glob("#{$signing_assets_path}/*", File::FNM_DOTMATCH))
  else
    FileUtils.mkdir_p($signing_assets_path)
  end

  # Setup git configuration (private key)
  Tempfile.create("git_ssh_key") do |file|
    file.write(ENV["GIT_SSH_KEY"])
    file.chmod(0600)
    file.flush

    ENV["GIT_SSH_COMMAND"] = "ssh -i #{file.path} -o IdentitiesOnly=yes"
    git_user = ENV["GIT_USER"].split(":")
    
    if android
      # Clone the signing assets repo
      repo = Git.clone(ENV["KEYS_GIT_URL"], $signing_assets_path)
      repo.config("user.name", git_user[0], global: false)
      repo.config("user.email", git_user[1], global: false)

      # Create Google Play Store key in the keystore file
      id_segments = ENV["APP_IDENTIFIER"].split(".")
      google_cert = "certs/google_play_distribution/#{random(10)}.pem"
      google_keystore = "keystores/google.jks"
      if File.exist?("#{$signing_assets_path}/#{google_keystore}")
        decrypt("#{$signing_assets_path}/#{google_keystore}")
      end
      
      # Ensure the app identifier does not already exist
      keytool(
        command: "list",
        keystore_path: "#{$signing_assets_path}/#{google_keystore}",
        keystore_password: ENV["MATCH_PASSWORD"],
        verbose: true
      )
      unless Actions.lane_context[Fastlane::Actions::SharedValues::KEYTOOL_OUTPUT].include?(ENV["APP_IDENTIFIER"])
        keytool(
          command: "genkeypair",
          keystore_path: "#{$signing_assets_path}/#{google_keystore}",
          keystore_password: ENV["MATCH_PASSWORD"],
          key_alias: ENV["APP_IDENTIFIER"],
          key_algorithm: "RSA",
          key_size: 2048,
          validity: 10000,
          dname: "CN=#{id_segments.pop}, O=#{id_segments.pop}, OU=#{id_segments.pop}, L=City, S=State, C=US",
          verbose: true
        )
        keytool(
          command: "exportcert",
          keystore_path: "#{$signing_assets_path}/#{google_keystore}",
          keystore_password: ENV["MATCH_PASSWORD"],
          key_alias: ENV["APP_IDENTIFIER"],
          file: "#{$signing_assets_path}/#{google_cert}",
          rfc: true,
        )
      
        # Re-encrypt
        encrypt("#{$signing_assets_path}/#{google_keystore}")
        repo.add(google_keystore)
      
        encrypt("#{$signing_assets_path}/#{google_cert}")
        repo.add(google_cert)
      
        # Push updated files
        repo.commit("[fastlane] Updated keystore and certificate android")
        repo.push
      end
    end

    
    if apple.any?
      # Reset the build keychain
      if File.exist?("#{$keychains_path}/#{ENV["KEYCHAIN"]}-db")
        delete_keychain(name: ENV["KEYCHAIN"])
      end
      create_keychain(
        name: ENV["KEYCHAIN"],
        password: ENV["MATCH_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600
      )

      # Create Apple signing certs and provisioning profiles with match
      apple_app_store_key = get_apple_app_store_key()
      apple.each do |platform|
        match(
          keychain_name: ENV["KEYCHAIN"],
          keychain_password: ENV["MATCH_PASSWORD"],
          git_url: ENV["KEYS_GIT_URL"],
          git_full_name: git_user[0],
          git_user_email: git_user[1],
          app_identifier: ENV["APP_IDENTIFIER"],
          api_key: apple_app_store_key,
          platform: platform,
          type: "appstore",
          additional_cert_types: "mac_installer_distribution",
          include_mac_in_profiles: true,
          generate_apple_certs: true,
          readonly: false,
          force: true,
          verbose: true
        )
      end
    end
  end
end

desc "Import keystores, certificates and provisioning profiles"
lane :import_signingassets do |options|
  android = options[:android] ? true : false
  apple = []
  apple.push("ios") if options[:ios]
  apple.push("macos", "catalyst") if options[:macos]
  apple.push("tvos") if options[:tvos]
  
  # Clean the signing assets repo
  if Dir.exist?($signing_assets_path)
    FileUtils.rm_rf(Dir.glob("#{$signing_assets_path}/*", File::FNM_DOTMATCH))
  else
    FileUtils.mkdir_p($signing_assets_path)
  end

  # Clone the signing assets repo
  Tempfile.create("git_ssh_key") do |file|
    file.write(ENV["GIT_SSH_KEY"])
    file.chmod(0600)
    file.flush

    ENV["GIT_SSH_COMMAND"] = "ssh -i #{file.path} -o IdentitiesOnly=yes"
    repo = Git.clone(ENV["KEYS_GIT_URL"], $signing_assets_path)

    if android
      # Generate Google keystore properties from the repo
      google_keystore = "keystores/google.jks"
      if File.exist?("#{$signing_assets_path}/#{google_keystore}")
        decrypt("#{$signing_assets_path}/#{google_keystore}")
        File.open("../android/key.properties", "w") do |file|
          file.puts "storeFile=#{$signing_assets_path}/#{google_keystore}"
          file.puts "storePassword=#{ENV["MATCH_PASSWORD"]}"
          file.puts "keyAlias=#{ENV["APP_IDENTIFIER"]}"
          file.puts "keyPassword=#{ENV["MATCH_PASSWORD"]}"
        end
      end
    end

    if apple.any?
      # Reset the build keychain
      if File.exist?("#{$keychains_path}/#{ENV["KEYCHAIN"]}-db")
        delete_keychain(name: ENV["KEYCHAIN"])
      end
      create_keychain(
        name: ENV["KEYCHAIN"],
        password: ENV["MATCH_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600
      )

      # Install Apple certs and profiles from the repo
      apple_app_store_key = get_apple_app_store_key()
      apple.each do |platform|
        begin
          match(
            keychain_name: ENV["KEYCHAIN"],
            keychain_password: ENV["MATCH_PASSWORD"],
            git_url: $signing_assets_path,
            app_identifier: ENV["APP_IDENTIFIER"],
            api_key: apple_app_store_key,
            platform: platform,
            type: "appstore",
            additional_cert_types: "mac_installer_distribution",
            generate_apple_certs: true,
            include_mac_in_profiles: true,
            readonly: true,
            force: false,
            verbose: false
          )
        rescue StandardError => e
          UI.important("Error fetching #{platform} info: #{e.message}")
        end
      end
    end
  end
end

# Import platform lanes
import "./lanes/apple.rb"
import "./lanes/flutter.rb"

# Common helper functions
def execute_command(cmd)
  UI.command(cmd)
  output, status = Open3.capture2(cmd, err: [:child, :out])
  unless status.success?
    UI.user_error!("== Command Failed ==\nExit Status: #{status.exitstatus}\nOutput: #{output}")
  end
  output
end

def random(length)
  chars = ('0'..'9').to_a + ('A'..'Z').to_a
  Array.new(length) { chars.sample }.join
end

def encrypt(file)
  cryptor = Match::Encryption::MatchFileEncryption.new
  cryptor.encrypt(file_path: file, password: ENV["MATCH_PASSWORD"])
end

def decrypt(file)
  cryptor = Match::Encryption::MatchFileEncryption.new
  cryptor.decrypt(file_path: file, password: ENV["MATCH_PASSWORD"])
end

def get_apple_app_store_key()
  # Apple App Store Connect API setup
  app_store_connect_api_key(
    key_content: ENV["APP_STORE_KEY"],
    key_id: ENV["APP_STORE_KEY_ID"],
    issuer_id: ENV["APP_STORE_ISSUER_ID"],
    in_house: false
  ) || ""
end

def get_google_play_store_key()
  # Google Play Store API setup
  key = ENV["PLAY_STORE_KEY"] || "{}"
  JSON.parse(key)
end

def increment_version_patch()
  # Check the latest version string in Test Flight
  apple_app_store_latest_version(
    api_key: get_apple_app_store_key(),
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false
  )
  apple_version = lane_context[Fastlane::Actions::SharedValues::APPLE_APP_STORE_LATEST_VERSION]

  # Check the latest version string in Google Play
  google_play_store_latest_version(
    api_key: get_google_play_store_key(),
    app_identifier: ENV["APP_IDENTIFIER"],
    live: false
  )
  google_version = lane_context[Fastlane::Actions::SharedValues::GOOGLE_PLAY_STORE_LATEST_VERSION]

  # Check the latest version string on the web
  # web_latest_version(
  #   api_key: "",
  #   app_identifier: ENV["APP_IDENTIFIER"],
  #   live: false
  # )
  web_version = "0.0.0"  # lane_context[Fastlane::Actions::SharedValues::WEB_LATEST_VERSION]

  # Select the highest existing version number
  latest_version = [
    Gem::Version.new(apple_version),
    Gem::Version.new(google_version),
    Gem::Version.new(web_version)].max
  puts "Found version #{latest_version}"

  # Increment the version patch segment
  version_segments = latest_version.segments
  while version_segments.length < 3
    version_segments << 0
  end
  version_segments[2] += 1
  new_version = version_segments.join(".")
  UI.success("Setting the new version as #{new_version}")
  new_version
end
